{"version":3,"sources":["app/constants/index.ts","app/utilities/index.ts","app/api/constants.ts","app/api/requests.ts","app/modules/game/types.ts","app/modules/game/actions.ts","app/modules/game/reducers.ts","app/modules/game/index.ts","app/components/CardButton/index.tsx","app/components/CardMatrix/index.tsx","app/components/Histogram/index.tsx","app/modules/firebase/config.ts","app/modules/firebase/types.ts","app/modules/firebase/actions.ts","app/components/History/GameCard.tsx","app/components/History/index.tsx","app/components/Players/index.tsx","app/components/PokerOdds/index.tsx","app/components/index.tsx","app/modules/firebase/component.tsx","app/components/Header/index.tsx","app/modules/firebase/reducers.ts","app/modules/firebase/index.ts","app/index.tsx","app/store/reducers.ts","app/store/configure.ts","registerServiceWorker.ts","index.tsx"],"names":["constants_cards","titleize","hand","toLowerCase","replace","x","toUpperCase","cardsToString","cards","length","suit","card","reduce","prev","curr","str","cardsToFirestoreHand","0","1","Error","firestoreHandToCards","stringToCard","constants_url","routes","histogram","iters","odds","postJSON","url","body","fetch","JSON","stringify","headers","Content-Type","method","then","data","json","twoDecimals","num","Math","round","GAME","parseOdds","allOdds","template","numRandom","newOdds","map","forEach","odd","index","o","i","idx","acc","win","tie","addPlayerCards","dispatch","playerCards","substring","payload","type","UPDATE_PLAYER_CARDS","editNumPlayers","NUMBER_OF_PLAYERS","actions_updateHistogram","others","board","other","histogram_1","_a","sent","Object","keys","key","y","getHistogram","hist","UPDATE_HISTOGRAM","actions_updateOdds","hands","numRequests","lodash","filter","includes","requests","push","Promise","all","oddsTemplate","getOdds","UPDATE_ODDS","updateGame","game","UPDATE","INITIAL_STATE","player","player_count","id","createdAt","index_cjs","Timestamp","fromDate","Date","updatedAt","modules_game","state","action","tslib_es6","ADD_BOARD","ADD_OTHER_CARDS","concat","UPDATE_ID","style","height","margin","width","CardButton","card_text","handleClick","selected","bg","backgroundColor","isColor","react","bloomer_min","className","onClick","value","CardMatrix_Matrix","_super","Matrix","props","_this","call","this","undefined","bind","prototype","componentDidUpdate","render","row","uuid","event","target","setState","CardMatrix","es","actions_namespaceObject","Histogram_PokerHistogram","PokerHistogram","react_vis_es","xDomain","yType","left","right","animated","d","label","toString","fontSize","display","xOffset","labelAnchorX","labelAnchorY","animation","oldProps","updateHistogram","Histogram","apiKey","authDomain","databaseURL","messagingSenderId","projectId","storageBucket","FIREBASE","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","signInSuccessUrl","firebase_config","auth","users","firestore","collection","actions_fetchUser","onAuthStateChanged","user","games_1","doc","uid","get","empty","add","FieldValue","serverTimestamp","UPDATE_KEY","orderBy","limit","latestDoc","FETCH_USER","actions_signOut","signOut","SIGN_OUT","getGames","userId","snapshot","newGames","docs","fsGame","NEW_GAME_TRUE","UPDATE_GAMES","setGame","set","actions_newGame","gamesRef","ref","DATE_FORMAT","GameCard","time","date","moment","seconds","format","History_History","History","firebase","games","newGame","isChanged","overflow","components_History","Players_Players","Players","NUM_PLAYERS","val","Number","components_Players","OddsComponent","marginLeft","PokerOdds_PokerOdds","PokerOdds","playerString","playerOdds","find","otherOdds","flexWrap","updateOdds","components_PokerOdds","components","react_grid_layout","cols","rowHeight","window","innerWidth","data-grid","w","h","FirebaseSignIn","react_firebaseui","firebaseAuth","Header_Header","Header","name","displayName","getNewGameButton","getAuthButton","handleNewGame","component","components_Header","reducers_INITIAL_STATE","ADD_GAME","TOGGLE_NEW_GAME","NEW_GAME_FALSE","app_App","App","createNewGame","componentDidMount","fetchUser","gameToFirestore","app","firebase_actions_namespaceObject","combineInitialState","store_reducers","redux","middleWare","redux_thunk_es","redux_devtools_extension","configure","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","store","document","getElementById","URL","origin","addEventListener","response","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7dfec9ef.chunk.js","sourcesContent":["/* prettier-ignore */\nexport const cards = [\n  ['AA', 'AKs' , 'AQs', 'AJs', 'ATs', 'A9s', 'A8s', 'A7s', 'A6s', 'A5s', 'A4s', 'A3s', 'A2s'],\n  ['AKo', 'KK' , 'KQs', 'KJs', 'KTs', 'K9s', 'K8s', 'K7s', 'K6s', 'K5s', 'K4s', 'K3s', 'K2s'],\n  ['AQo', 'KQo', 'QQ' , 'QJs', 'QTs', 'Q9s', 'Q8s', 'Q7s', 'Q6s', 'Q5s', 'Q4s', 'Q3s', 'Q2s'],\n  ['AJo', 'KJo', 'QJo', 'JJ' , 'JTs', 'J9s', 'J8s', 'J7s', 'J6s', 'J5s', 'J4s', 'J3s', 'J2s'],\n  ['ATo', 'KTo', 'QTo', 'JTo', 'TT' , 'T9s', 'T8s', 'T7s', 'T6s', 'T5s', 'T4s', 'T3s', 'T2s'],\n  ['A9o', 'K9o', 'Q9o', 'J9o', 'T9o', '99' , '98s', '97s', '96s', '95s', '94s', '93s', '92s'],\n  ['A8o', 'K8o', 'Q8o', 'J8o', 'T8o', '98o', '88' , '87s', '86s', '85s', '84s', '83s', '82s'],\n  ['A7o', 'K7o', 'Q7o', 'J7o', 'T7o', '97o', '87o', '77' , '76s', '75s', '74s', '73s', '72s'],\n  ['A6o', 'K6o', 'Q6o', 'J6o', 'T6o', '96o', '86o', '76o', '66' , '65s', '64s', '63s', '62s'],\n  ['A5o', 'K5o', 'Q5o', 'J5o', 'T5o', '95o', '85o', '75o', '65o', '55' , '54s', '53s', '52s'],\n  ['A4o', 'K4o', 'Q4o', 'J4o', 'T4o', '94o', '84o', '74o', '64o', '54o', '44' , '43s', '42s'],\n  ['A3o', 'K3o', 'Q3o', 'J3o', 'T3o', '93o', '83o', '73o', '63o', '53o', '43o', '33' , '32s'],\n  ['A2o', 'K2o', 'Q2o', 'J2o', 'T2o', '92o', '82o', '72o', '62o', '52o', '42o', '32o', '22 '],\n];\n\nexport const histogramKeys = [\n  'high_card',\n  'pair',\n  'two_pair',\n  'set',\n  'straight',\n  'flush',\n  'full_house',\n  'quads',\n  'straight_flush',\n  'royal_flush'\n];\n\nexport const RANDOM = '.';\n\nexport const titleize = (hand: string) => {\n  return hand\n    .toLowerCase()\n    .replace(/(?:^|\\s|-)\\S/g, x => x.toUpperCase())\n    .replace(/_/g, ' ');\n};\n","import * as _ from 'lodash';\n\nimport { FirestoreGame, FirestoreHand } from '../modules/firebase/types';\nimport { Card, GameState } from '../modules/game/types';\n\nexport const cardsToString = (cards: Card[]) => {\n  if (cards.length === 2) {\n    if (cards[0].suit === 'os') {\n      return cards[0].card + cards[1].card + 'o';\n    } else if (cards[0].suit === 'ss') {\n      return cards[0].card + cards[1].card + 's';\n    }\n  }\n\n  return cards.reduce((prev, curr) => prev + curr.str, '');\n};\n\nexport const firestoreToGame = (fsGame: FirestoreGame): GameState => {\n  return {\n    ...fsGame,\n    player: firestoreHandToCards(fsGame.player),\n    board: fsGame.board.map(stringToCard),\n    others: fsGame.others.map(firestoreHandToCards)\n  };\n};\n\nexport const gameToFirestore = (game: GameState): FirestoreGame => {\n  return {\n    ...game,\n    player: cardsToFirestoreHand(game.player),\n    board: game.board.map(card => card.str),\n    others: game.others.map(cardsToFirestoreHand)\n  };\n};\n\nconst cardsToFirestoreHand = (cards: Card[]): FirestoreHand => {\n  if (cards.length === 2) {\n    return {\n      0: cards[0].str,\n      1: cards[1].str\n    };\n  }\n  throw Error('invalid input');\n};\n\nconst firestoreHandToCards = (hand: FirestoreHand): Card[] => {\n  return [stringToCard(hand[0]), stringToCard(hand[1])];\n};\n\nexport const stringToCard = (str: string): Card => {\n  return {\n    card: str[0],\n    suit: str[1],\n    str\n  };\n};\n","const testUrl = 'http://localhost:8080/api';\nconst devUrl =\n  'https://aw4hzcvs3f.execute-api.us-east-1.amazonaws.com/dev/api/';\n\nconst url = process.env.NODE_ENV === 'production' ? devUrl : testUrl;\n\nexport const routes = {\n  histogram(iters: string = '') {\n    if (iters) {\n      return `${url}/histogram?iters=${iters}`;\n    }\n    return `${url}/histogram`;\n  },\n  odds(iters: string = '') {\n    if (iters) {\n      return `${url}/odds?iters=${iters}`;\n    }\n    return `${url}/odds`;\n  }\n};\n","import * as _ from 'lodash';\n\nimport { titleize } from '../constants';\nimport { Card } from '../modules/game/types';\nimport { cardsToString } from '../utilities';\nimport { routes } from './constants';\n\nasync function postJSON(url: string, body: any) {\n  return fetch(url, {\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST'\n  }).then(data => data.json());\n}\n\nexport async function getHistogram(\n  hand: Card[],\n  others: Card[][],\n  board: Card[]\n) {\n  interface Body {\n    hand: string;\n    others?: string[];\n    board?: string;\n  }\n\n  const body: Body = {\n    hand: cardsToString(hand)\n  };\n\n  if (others.length) {\n    body.others = others.map(other => cardsToString(other));\n  }\n\n  if (board.length) {\n    body.board = cardsToString(board);\n  }\n  try {\n    const { histogram } = await postJSON(routes.histogram('10000'), body);\n\n    return Object.keys(histogram).map(key => ({\n      x: histogram[key],\n      y: titleize(key)\n    }));\n  } catch (e) {\n    return [];\n  }\n}\n\ninterface IOdd {\n  win: number;\n  tie: number;\n  hand: string;\n}\nconst twoDecimals = (num: number) => Math.round(num * 100 * 100) / 100;\n\nexport async function getOdds(\n  hands: Card[][],\n  board: Card[],\n  numRequests: number = 5\n) {\n  const RANDOM = '.';\n\n  interface Body {\n    hands: string[];\n    board?: string;\n  }\n\n  const body: Body = {\n    hands: hands.map(hand => (_.isEmpty(hand) ? RANDOM : cardsToString(hand)))\n  };\n\n  const numRandom = hands.filter(_.isEmpty).length;\n\n  if (board.length) {\n    body.board = cardsToString(board);\n  }\n\n  try {\n    if ([0, 1].includes(numRandom)) {\n      const { odds } = await postJSON(routes.odds(), body);\n\n      return odds.map((odd: IOdd) => {\n        return {\n          hand: odd.hand,\n          win: twoDecimals(odd.win),\n          tie: twoDecimals(odd.tie)\n        };\n      });\n    }\n\n    // nit api goes very slowly for > 2 random hands\n    // so we're doing many requests with low number of iterations\n    // in parallel\n    const requests = [];\n    for (let i = 0; i < numRequests; i++) {\n      requests.push(postJSON(routes.odds('10'), body));\n    }\n\n    const allOdds = await Promise.all(requests);\n    const oddsTemplate: IOdd[] = hands.map(hand => ({\n      win: 0,\n      tie: 0,\n      hand: _.isEmpty(hand) ? 'random' : cardsToString(hand)\n    }));\n\n    return parseOdds(allOdds, oddsTemplate, numRandom);\n  } catch (e) {\n    return [];\n  }\n}\n\nconst parseOdds = (\n  allOdds: Array<{ odds: IOdd[] }>,\n  template: IOdd[],\n  numRandom: number\n) => {\n  const newOdds: any = template.map(x => []);\n\n  allOdds.forEach((odd, index) => {\n    odd.odds.forEach((o, i) => {\n      newOdds[i][index] = o;\n    });\n  });\n\n  const parsedOdds = newOdds.map((o: IOdd[], idx: number) => {\n    return o.reduce((acc: IOdd, odd: IOdd) => {\n      return {\n        win: acc.win + odd.win,\n        tie: acc.tie + odd.tie,\n        hand: odd.hand\n      };\n    }, template[idx]);\n  });\n\n  return parsedOdds.map((o: IOdd) => {\n    if (o.hand === 'random') {\n      return {\n        win: twoDecimals(o.win / allOdds.length / numRandom),\n        tie: twoDecimals(o.tie / allOdds.length / numRandom),\n        hand: o.hand\n      };\n    }\n    return {\n      win: twoDecimals(o.win / allOdds.length),\n      tie: twoDecimals(o.tie / allOdds.length),\n      hand: o.hand\n    };\n  });\n};\n","import { firestore } from 'firebase';\n\nexport interface Card {\n  card: string;\n  suit: string;\n  str: string;\n}\n\nexport enum GAME {\n  UPDATE = 'UPDATE',\n  UPDATE_PLAYER_CARDS = 'UPDATE_PLAYER_CARDS',\n  ADD_OTHER_CARDS = 'OTHER_CARDS',\n  ADD_BOARD = 'ADD_BOARD',\n  NUMBER_OF_PLAYERS = 'NUMBER_OF_PLAYERS',\n  UPDATE_HISTOGRAM = 'UPDATE_HISTOGRAM',\n  UPDATE_ODDS = 'UPDATE_ODDS',\n  UPDATE_ID = 'UPDATE_ID'\n}\n\nexport interface IHistogram {\n  x: number;\n  y: string;\n}\n\nexport interface GameOdds {\n  win: number;\n  tie: number;\n  hand: string;\n}\n\nexport interface GameState {\n  createdAt: firestore.Timestamp;\n  updatedAt: firestore.Timestamp | null;\n  board: Card[];\n  others: Card[][];\n  player_count: number;\n  player: Card[];\n  histogram: IHistogram[];\n  odds: GameOdds[];\n  id: string;\n}\n","import { Dispatch } from 'redux';\n\nimport { getHistogram, getOdds } from '../../api/requests';\nimport { Card, GAME, GameState } from './types';\n\nexport const addPlayerCards = (cards: string) => (dispatch: Dispatch) => {\n  let playerCards: Card[] = [];\n\n  if (cards.length === 2 || cards.length === 3) {\n    const suit = cards.length === 3 ? cards[cards.length - 1] : 'o';\n\n    playerCards = [\n      {\n        card: cards[0],\n        suit: suit + 's',\n        str: ''\n      },\n      {\n        card: cards[1],\n        suit: suit + 's',\n        str: ''\n      }\n    ];\n  } else if (cards.length === 4) {\n    playerCards = [\n      {\n        card: cards[0],\n        suit: cards[1],\n        str: cards.substring(0, 2)\n      },\n      {\n        card: cards[2],\n        suit: cards[3],\n        str: cards.substring(2, 4)\n      }\n    ];\n  }\n\n  dispatch({\n    payload: playerCards,\n    type: GAME.UPDATE_PLAYER_CARDS\n  });\n};\n\nexport const editNumPlayers = (num: number) => (dispatch: Dispatch) => {\n  dispatch({\n    payload: num,\n    type: GAME.NUMBER_OF_PLAYERS\n  });\n};\n\ninterface HistogramBody {\n  hand: Card[];\n  others: Card[][];\n  board: Card[];\n}\n\nexport const updateHistogram = (data: HistogramBody) => (\n  dispatch: Dispatch\n) => {\n  getHistogram(data.hand, data.others, data.board).then(hist =>\n    dispatch({\n      payload: hist,\n      type: GAME.UPDATE_HISTOGRAM\n    })\n  );\n};\n\nexport const updateOdds = (hands: Card[][], board: Card[]) => (\n  dispatch: Dispatch\n) => {\n  getOdds(hands, board).then(odds => {\n    dispatch({\n      payload: odds,\n      type: GAME.UPDATE_ODDS\n    });\n  });\n};\n\nexport const updateGame = (game: GameState) => (dispatch: Dispatch) => {\n  dispatch({\n    payload: game,\n    type: GAME.UPDATE\n  });\n};\n","import { firestore } from 'firebase';\nimport { histogramKeys, titleize } from '../../constants';\nimport { GAME, GameState } from './types';\n\nexport const INITIAL_STATE: GameState = {\n  board: [],\n  others: [],\n  player: [],\n  player_count: 2,\n  histogram: histogramKeys.map(hand => ({ x: 0, y: titleize(hand) })),\n  odds: [],\n  id: '',\n  createdAt: firestore.Timestamp.fromDate(new Date()),\n  updatedAt: null\n};\n\nexport default (state: GameState = INITIAL_STATE, action: any) => {\n  switch (action.type) {\n    case GAME.UPDATE_PLAYER_CARDS:\n      return {\n        ...state,\n        player: action.payload\n      };\n    case GAME.NUMBER_OF_PLAYERS:\n      return {\n        ...state,\n        player_count: action.payload\n      };\n    case GAME.ADD_BOARD:\n      return {\n        ...state,\n        game: action.payload\n      };\n    case GAME.ADD_OTHER_CARDS:\n      return {\n        ...state,\n        others: [...state.others, action.payload]\n      };\n    case GAME.UPDATE_HISTOGRAM:\n      return {\n        ...state,\n        histogram: action.payload\n      };\n    case GAME.UPDATE_ODDS:\n      return {\n        ...state,\n        odds: action.payload\n      };\n    case GAME.UPDATE_ID:\n      return {\n        ...state,\n        id: action.payload\n      };\n    case GAME.UPDATE:\n      return {\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import * as boardActions from './actions';\nimport reducer, { INITIAL_STATE } from './reducers';\n\nexport { boardActions, INITIAL_STATE };\n\nexport default reducer;\n","import { Button } from 'bloomer';\nimport * as React from 'react';\n\ninterface Props {\n  card_text: string;\n  handleClick: (event: any) => void;\n  selected?: boolean;\n}\n\nconst style = {\n  height: '2.1em',\n  margin: '0.05em',\n  width: '2.1em'\n};\n\nexport default function CardButton({\n  card_text,\n  handleClick,\n  selected\n}: Props) {\n  const bg = {\n    backgroundColor: ''\n  };\n  let isColor = 'white';\n  if (selected) {\n    bg.backgroundColor = '#efeded';\n  }\n  if (card_text.includes('s')) {\n    isColor = 'info';\n    if (selected) {\n      bg.backgroundColor = '#1382ce';\n    }\n  } else if (card_text.includes('o')) {\n    isColor = 'danger';\n    if (selected) {\n      bg.backgroundColor = '#e4163e';\n    }\n  }\n\n  return (\n    <Button\n      style={selected ? { ...style, ...bg } : style}\n      isColor={isColor}\n      className=\"button\"\n      onClick={handleClick}\n      value={card_text}\n    >\n      {card_text}\n    </Button>\n  );\n}\n","import { Container } from 'bloomer';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as UUID from 'uuid';\n\nimport { cards } from '../../constants';\nimport { boardActions } from '../../modules/game';\nimport CardButton from '../CardButton';\n\ninterface DispatchProps {\n  addPlayerCards: typeof boardActions['addPlayerCards'];\n}\n\ninterface State {\n  selected?: string;\n}\n\ntype Props = DispatchProps;\n\nclass Matrix extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      selected: undefined\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  public componentDidUpdate() {\n    const { selected } = this.state;\n\n    if (selected) {\n      this.props.addPlayerCards(selected);\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"card-matrix\">\n        {cards.map((row: string[]) => {\n          return (\n            <Container style={{ margin: 0 }} key={UUID.v4()}>\n              {row.map(card => (\n                <CardButton\n                  key={card}\n                  card_text={card}\n                  handleClick={this.handleClick}\n                  selected={this.state.selected === card}\n                />\n              ))}\n            </Container>\n          );\n        })}\n      </div>\n    );\n  }\n\n  private handleClick(event: Event) {\n    const target = event.target as HTMLButtonElement;\n\n    this.setState({\n      selected: target.value\n    });\n  }\n}\n\nexport default connect(\n  undefined,\n  {\n    addPlayerCards: boardActions.addPlayerCards\n  }\n)(Matrix);\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  FlexibleXYPlot,\n  HorizontalBarSeries,\n  LabelSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis\n} from 'react-vis';\n\nimport * as boardActions from '../../modules/game/actions';\nimport { GameState } from '../../modules/game/types';\nimport { AppState } from '../../store/reducers';\n\ninterface DispatchProps {\n  updateHistogram: typeof boardActions['updateHistogram'];\n}\ninterface StateProps {\n  game: GameState;\n}\n\ntype Props = DispatchProps & StateProps;\n\nclass PokerHistogram extends React.Component<Props> {\n  public render() {\n    const { histogram, player } = this.props.game;\n\n    if (_.isEmpty(player)) {\n      return <div>Enter a hand to show the histogram</div>;\n    }\n\n    if (_.isEmpty(histogram)) {\n      return <div>Loading...</div>;\n    }\n\n    return (\n      <FlexibleXYPlot\n        xDomain={[0, 100]}\n        width={500}\n        yType='ordinal'\n        margin={{ left: 100, right: 50 }}\n        animated={true}\n      >\n        <VerticalGridLines />\n        <XAxis />\n        <YAxis />\n        <HorizontalBarSeries data={histogram} />\n        <LabelSeries\n          data={histogram.map(d => ({\n            ...d,\n            label: d.x.toString(),\n            style: {\n              fontSize: 10,\n              display: d.x === 0 ? 'none' : 'inherit'\n            },\n            xOffset: 5\n          }))}\n          labelAnchorX='text-after-edge'\n          labelAnchorY='middle'\n          animation={true}\n        />\n      </FlexibleXYPlot>\n    );\n  }\n  public componentDidUpdate(oldProps: Props) {\n    const { game, updateHistogram } = this.props;\n    const { player, others, board, histogram } = game;\n\n    if (\n      (!_.isEmpty(histogram) &&\n        _.isEqual(histogram, oldProps.game.histogram)) ||\n      _.isEmpty(player)\n    ) {\n      return;\n    }\n    if (!_.isEqual(game.player, oldProps.game.player)) {\n      updateHistogram({\n        hand: player,\n        others,\n        board\n      });\n    }\n  }\n}\n\nexport default connect(\n  (state: AppState) => ({\n    game: state.game\n  }),\n  {\n    updateHistogram: boardActions.updateHistogram\n  }\n)(PokerHistogram);\n","import * as firebase from 'firebase';\ninterface IFirebaseConfig {\n  apiKey: string;\n  authDomain: string;\n  databaseURL: string;\n  messagingSenderId: string;\n  projectId: string;\n  storageBucket: string;\n}\n\nconst config: IFirebaseConfig = {\n  apiKey: 'AIzaSyAyWYP4VS7IYAn4pz4xVcqvDT4K4AXXLb4',\n  authDomain: 'poker-hands-123.firebaseapp.com',\n  databaseURL: 'https://poker-hands-123.firebaseio.com',\n  messagingSenderId: '501304823469',\n  projectId: 'poker-hands-123',\n  storageBucket: ''\n};\n\nfirebase.initializeApp(config);\n\nexport const uiConfig = {\n  signInFlow: 'popup',\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n  signInSuccessUrl: '/signedIn'\n};\n\nexport default firebase;\n","import { firestore } from 'firebase';\nimport { GameOdds, GameState, IHistogram } from '../game/types';\n\nexport enum FIREBASE {\n  FETCH_USER = 'FETCH_USER',\n  SIGN_OUT = 'SIGN_OUT',\n  UPDATE_KEY = 'UPDATE_KEY',\n  UPDATE_GAMES = 'UPDATE_GAMES',\n  ADD_GAME = 'ADD_GAME',\n  TOGGLE_NEW_GAME = 'TOGGLE_NEW_GAME',\n  NEW_GAME_TRUE = 'NEW_GAME_TRUE',\n  NEW_GAME_FALSE = 'NEW_GAME_FALSE'\n}\n\nexport interface AuthMap {\n  [key: string]: string;\n}\n\nexport interface FirebaseState {\n  user?: firebase.User;\n  key?: string;\n  games: GameState[];\n  newGame: boolean;\n}\n\nexport interface FirestoreHand {\n  0: string;\n  1: string;\n}\n\nexport interface FirestoreGame {\n  board: string[];\n  others: FirestoreHand[];\n  player: FirestoreHand;\n  createdAt: firestore.Timestamp;\n  updatedAt: firestore.Timestamp | null;\n  player_count: number;\n  histogram: IHistogram[];\n  odds: GameOdds[];\n  id: string;\n}\n\nexport type AuthState = AuthMap;\n","import * as _ from 'lodash';\nimport { Dispatch } from 'redux';\n\nimport { firestore } from 'firebase';\nimport { firestoreToGame } from '../../utilities';\nimport { INITIAL_STATE as gameInit } from '../game/index';\nimport { GAME } from '../game/types';\nimport myFirebase from './config';\nimport { FIREBASE, FirestoreGame } from './types';\n\nconst auth = myFirebase.auth();\nconst users = myFirebase.firestore().collection('users');\n\nexport const fetchUser = () => (dispatch: Dispatch) => {\n  auth.onAuthStateChanged(user => {\n    if (user) {\n      const games = users.doc(user.uid).collection('games');\n      games.get().then((doc: firebase.firestore.QuerySnapshot) => {\n        if (doc.empty) {\n          // create a new game theres no games for this user\n          games\n            .add({\n              createdAt: firestore.FieldValue.serverTimestamp()\n            })\n            .then(game => {\n              dispatch({\n                type: FIREBASE.UPDATE_KEY,\n                payload: game.id\n              });\n            });\n        } else {\n          // get the last created game\n          games\n            .orderBy('createdAt')\n            .limit(1)\n            .get()\n            .then(latestDoc => {\n              latestDoc.forEach(d => {\n                dispatch({\n                  type: FIREBASE.UPDATE_KEY,\n                  payload: d.id\n                });\n\n                // update redux data if needed\n                const data = d.data();\n                if (!_.isEmpty(data.odds)) {\n                  dispatch({\n                    type: GAME.UPDATE_ODDS,\n                    payload: data.odds\n                  });\n                }\n              });\n            });\n        }\n      });\n\n      dispatch({\n        payload: user,\n        type: FIREBASE.FETCH_USER\n      });\n    }\n  });\n};\n\nexport const signOut = () => (dispatch: Dispatch) => {\n  auth.signOut().then(() => {\n    dispatch({\n      type: FIREBASE.SIGN_OUT\n    });\n  });\n};\n\nexport const getGames = (userId: string) => (dispatch: Dispatch) => {\n  users\n    .doc(userId)\n    .collection('games')\n    .orderBy('createdAt', 'desc')\n    .limit(25)\n    .get()\n    .then(snapshot => {\n      const newGames = snapshot.docs\n        .map(d => d.data())\n        .map((game: FirestoreGame) => {\n          if (_.isEmpty(game.player)) {\n            return game;\n          }\n          return firestoreToGame(game);\n        });\n\n      if (_.isEmpty(newGames[0].player)) {\n        dispatch({\n          type: FIREBASE.NEW_GAME_TRUE\n        });\n      }\n      dispatch({\n        type: FIREBASE.UPDATE_GAMES,\n        payload: newGames\n      });\n    });\n};\n\nexport const setGame = (userId: string, game: FirestoreGame) => (\n  dispatch: Dispatch\n) => {\n  users\n    .doc(userId)\n    .collection('games')\n    .doc(game.id)\n    .set(game);\n};\n\nexport const newGame = (userId: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: FIREBASE.NEW_GAME_TRUE\n  });\n\n  const gamesRef = users.doc(userId).collection('games');\n  const ref = gamesRef.doc();\n\n  const game = {\n    ...gameInit,\n    id: ref.id,\n    createdAt: firestore.Timestamp.fromDate(new Date()),\n    updatedAt: null\n  };\n  gamesRef\n    .doc(ref.id)\n    .set(game)\n    .then(() => {\n      dispatch({\n        type: GAME.UPDATE,\n        payload: game\n      });\n    });\n};\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardHeaderTitle,\n  Column,\n  Columns,\n  Content\n} from 'bloomer';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\nimport * as React from 'react';\nimport * as uuid from 'uuid';\n\nimport { GameState } from '../../modules/game/types';\nimport { cardsToString } from '../../utilities';\n\nconst DATE_FORMAT = 'L LT';\n\ninterface CardProps {\n  game: GameState;\n}\n\nexport default function GameCard({ game }: CardProps) {\n  const time = game.updatedAt ? game.updatedAt : game.createdAt;\n  const date = moment.unix(time.seconds);\n\n  if (_.isEmpty(game.player)) {\n    return <React.Fragment />;\n  }\n\n  return (\n    <Card className='game'>\n      <CardHeader>\n        <CardHeaderTitle>Hand: {cardsToString(game.player)}</CardHeaderTitle>\n        <CardHeaderTitle>({date.format(DATE_FORMAT)})</CardHeaderTitle>\n      </CardHeader>\n      <CardContent>\n        <Columns>\n          {game.others.map((hand, index) => (\n            <Column key={uuid.v4()}>\n              {`P${index + 2}: ${cardsToString(hand)}`}\n            </Column>\n          ))}\n        </Columns>\n        <Content>Board: {cardsToString(game.board)}</Content>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Column } from 'bloomer';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport * as firebaseActions from '../../modules/firebase/actions';\nimport { FirebaseState } from '../../modules/firebase/types';\nimport * as gameActions from '../../modules/game/actions';\nimport { GameState } from '../../modules/game/types';\nimport { AppState } from '../../store/reducers';\nimport GameCard from './GameCard';\n\nimport './history.css';\n\ninterface DispatchProps {\n  getGames: typeof firebaseActions['getGames'];\n  setGame: typeof firebaseActions['setGame'];\n  updateGame: typeof gameActions['updateGame'];\n}\n\ninterface StateProps {\n  firebase: FirebaseState;\n  game: GameState;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass History extends React.Component<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  public componentDidUpdate(oldProps: Props) {\n    const { user, games, newGame } = this.props.firebase;\n    const { player } = this.props.game;\n\n    if (user && this.isChanged(oldProps)) {\n      this.props.getGames(user.uid);\n    }\n\n    if (games.length && _.isEmpty(player) && newGame === false) {\n      this.props.updateGame(games[0]);\n    }\n  }\n\n  public render() {\n    const { games } = this.props.firebase;\n\n    return (\n      <div className='history' style={{ overflow: 'auto', height: '350px' }}>\n        <Column className='games'>\n          {games.map(game => (\n            <GameCard game={game} key={game.id} />\n          ))}\n        </Column>\n      </div>\n    );\n  }\n\n  private isChanged(oldProps: Props) {\n    const { user } = this.props.firebase;\n    return !_.isEqual(user, oldProps.firebase.user);\n  }\n}\n\nexport default connect(\n  (state: AppState) => ({\n    firebase: state.firebase,\n    game: state.game\n  }),\n  {\n    getGames: firebaseActions.getGames,\n    setGame: firebaseActions.setGame,\n    updateGame: gameActions.updateGame\n  }\n)(History);\n","import { Button } from 'bloomer';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as uuid from 'uuid';\n\nimport { connect } from 'react-redux';\nimport * as boardActions from '../../modules/game/actions';\n\ninterface DispatchProps {\n  editNumPlayers: typeof boardActions['editNumPlayers'];\n}\ninterface State {\n  selected: number;\n}\n\nconst NUM_PLAYERS = 4;\n\ntype Props = DispatchProps;\n\nclass Players extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      selected: 2\n    };\n  }\n\n  public componentDidUpdate() {\n    const { selected } = this.state;\n    if (selected) {\n      this.props.editNumPlayers(selected);\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"players\">\n        <b>Players</b>\n        <br />\n        {_.range(2, NUM_PLAYERS + 1).map(val => (\n          <Button\n            key={uuid.v4()}\n            value={val}\n            onClick={this.handleClick}\n            style={{\n              backgroundColor:\n                val === this.state.selected ? '#f3f3f3' : '#ffffff'\n            }}\n          >\n            {val}\n          </Button>\n        ))}\n      </div>\n    );\n  }\n\n  private handleClick(event: React.MouseEvent<HTMLButtonElement>) {\n    const { value } = event.target as HTMLButtonElement;\n\n    if (value) {\n      this.setState({\n        selected: Number(value)\n      });\n    }\n  }\n}\n\nexport default connect(\n  undefined,\n  {\n    editNumPlayers: boardActions.editNumPlayers\n  }\n)(Players);\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as UUID from 'uuid';\n\nimport * as boardActions from '../../modules/game/actions';\nimport { GameOdds, GameState } from '../../modules/game/types';\nimport { AppState } from '../../store/reducers';\nimport { cardsToString } from '../../utilities';\n\ninterface DispatchProps {\n  updateOdds: typeof boardActions['updateOdds'];\n}\ninterface StateProps {\n  game: GameState;\n}\n\ninterface OddsProps {\n  odds: GameOdds;\n  player: string;\n}\n\nfunction OddsComponent(props: OddsProps) {\n  return (\n    <div style={{ marginLeft: '10px' }}>\n      <b>\n        {props.player} ({props.odds.hand})\n      </b>\n      <br />\n      <span>Win %: {props.odds.win}</span>\n      <br />\n      <span>Tie %: {props.odds.tie}</span>\n    </div>\n  );\n}\n\ntype Props = DispatchProps & StateProps;\n\nclass PokerOdds extends React.Component<Props> {\n  public render() {\n    const { odds, player } = this.props.game;\n\n    if (_.isEmpty(player)) {\n      return <div>Enter a hand to show the odds</div>;\n    }\n\n    if (_.isEmpty(odds)) {\n      return <div>Loading...</div>;\n    }\n\n    const playerString = cardsToString(player);\n\n    const playerOdds = odds.find(odd => odd.hand === playerString) as GameOdds;\n    const otherOdds = odds.filter(odd => odd.hand !== playerString);\n\n    return (\n      <div style={{ display: 'flex', flexWrap: 'nowrap', marginLeft: '5px' }}>\n        <h6 className='title is-6'>Game Odds</h6>\n        {!_.isEmpty(playerOdds) && (\n          <OddsComponent odds={playerOdds} player='Player' />\n        )}\n        {!_.isEmpty(otherOdds) &&\n          otherOdds.map((odd, idx) => (\n            <OddsComponent\n              key={UUID.v4()}\n              odds={odd}\n              player={'Other ' + (idx + 1)}\n            />\n          ))}\n      </div>\n    );\n  }\n  public componentDidUpdate(oldProps: Props) {\n    const { game, updateOdds } = this.props;\n\n    if (_.isEmpty(game.player)) {\n      return;\n    }\n\n    if (!_.isEqual(game.player, oldProps.game.player)) {\n      const { player, others, board, player_count } = game;\n\n      const hands = [player];\n\n      for (let i = 0; i < player_count - 1; i++) {\n        if (others[i]) {\n          hands.push(others[i]);\n        } else {\n          hands.push({} as any);\n        }\n      }\n\n      updateOdds(hands, board);\n    }\n  }\n}\n\nexport default connect(\n  (state: AppState) => ({\n    game: state.game\n  }),\n  {\n    updateOdds: boardActions.updateOdds\n  }\n)(PokerOdds);\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport * as GridLayout from 'react-grid-layout';\n\nimport CardMatrix from './CardMatrix';\nimport PokerHistogram from './Histogram';\nimport History from './History';\nimport Players from './Players';\nimport PokerOdds from './PokerOdds';\n\nexport default function(props: {}) {\n  return (\n    <GridLayout\n      className='layout'\n      cols={12}\n      rowHeight={30}\n      width={window.innerWidth}\n    >\n      <div\n        key='history'\n        data-grid={{\n          x: 0,\n          y: 0,\n          w: 5,\n          h: 10\n        }}\n      >\n        <div className='title is-6' style={{ margin: 0 }}>\n          History\n        </div>\n        <History />\n      </div>\n      <div key='card-matrix' data-grid={{ x: 5, y: 0, w: 7, h: 12 }}>\n        <CardMatrix />\n      </div>\n      <div key='players' data-grid={{ x: 10, y: 0, w: 1, h: 5 }}>\n        <Players />\n      </div>\n      <div key='histogram' data-grid={{ x: 5, y: 12, w: 5, h: 10 }}>\n        <PokerHistogram />\n      </div>\n      <div key='odds' data-grid={{ x: 0, y: 1, w: 4, h: 2 * 2 }}>\n        <PokerOdds />\n      </div>\n    </GridLayout>\n  );\n}\n","import * as React from \"react\";\nimport { StyledFirebaseAuth } from \"react-firebaseui\";\n\nimport firebase, { uiConfig } from \"./config\";\n\nexport default class FirebaseSignIn extends React.Component {\n  public render() {\n    return (\n      <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n    );\n  }\n}\n","import { Button, Navbar, NavbarEnd, NavbarItem, NavbarStart } from 'bloomer';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport * as firebaseActions from '../../modules/firebase/actions';\nimport FirebaseSignIn from '../../modules/firebase/component';\nimport { AppState } from '../../store/reducers';\n\nimport './header.css';\n\ninterface DispatchProps {\n  signOut: typeof firebaseActions['signOut'];\n}\n\ninterface StateProps {\n  user: firebase.User;\n}\n\ninterface Props extends DispatchProps, StateProps {\n  handleNewGame: () => void;\n}\n\nexport class Header extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  public render() {\n    const { user } = this.props;\n    let name;\n    if (user) {\n      name = user.displayName;\n    }\n\n    return (\n      <div className='header'>\n        <Navbar style={{ backgroundColor: 'lightgrey' }}>\n          <NavbarStart>\n            <NavbarItem>Poker</NavbarItem>\n            <NavbarItem>\n              <b>{name}</b>\n            </NavbarItem>\n          </NavbarStart>\n          <NavbarEnd>\n            <NavbarItem>{this.getNewGameButton()}</NavbarItem>\n            <NavbarItem>{this.getAuthButton()}</NavbarItem>\n          </NavbarEnd>\n        </Navbar>\n      </div>\n    );\n  }\n  private getNewGameButton(): JSX.Element {\n    const { user, handleNewGame } = this.props;\n    if (user) {\n      return (\n        <Button onClick={handleNewGame} isColor='dark'>\n          New Game\n        </Button>\n      );\n    }\n    return <React.Fragment />;\n  }\n\n  private getAuthButton(): JSX.Element {\n    const { user, signOut } = this.props;\n    if (user) {\n      return (\n        <Button onClick={signOut} className='sign-out' isColor='primary'>\n          Sign Out\n        </Button>\n      );\n    }\n    return <FirebaseSignIn />;\n  }\n}\n\nexport default connect(\n  (state: AppState) => ({\n    user: state.firebase.user\n  }),\n  {\n    signOut: firebaseActions.signOut\n  }\n)(Header);\n","import { FIREBASE, FirebaseState } from './types';\n\nexport const INITIAL_STATE: FirebaseState = {\n  user: undefined,\n  key: undefined,\n  games: [],\n  newGame: false\n};\n\nexport default (state: FirebaseState = INITIAL_STATE, action: any) => {\n  switch (action.type) {\n    case FIREBASE.FETCH_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case FIREBASE.SIGN_OUT:\n      return {\n        ...state,\n        user: undefined\n      };\n    case FIREBASE.UPDATE_KEY:\n      return {\n        ...state,\n        key: action.payload\n      };\n    case FIREBASE.UPDATE_GAMES:\n      return {\n        ...state,\n        games: action.payload\n      };\n    case FIREBASE.ADD_GAME:\n      return {\n        ...state,\n        games: state.games.map(game => {\n          if (game.id === action.payload.id) {\n            return {\n              ...game,\n              ...action.payload\n            };\n          }\n          return game;\n        })\n      };\n    case FIREBASE.TOGGLE_NEW_GAME:\n      return {\n        ...state,\n        newGame: !state.newGame\n      };\n    case FIREBASE.NEW_GAME_TRUE:\n      return {\n        ...state,\n        newGame: true\n      };\n    case FIREBASE.NEW_GAME_FALSE:\n      return {\n        ...state,\n        newGame: false\n      };\n    default:\n      return state;\n  }\n};\n","import * as firebaseActions from './actions';\nimport reducer, { INITIAL_STATE } from './reducers';\n\nexport { firebaseActions, INITIAL_STATE };\n\nexport default reducer;\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport Wrapper from './components';\nimport Header from './components/Header';\nimport { firebaseActions } from './modules/firebase';\nimport { GameState } from './modules/game/types';\nimport { AppState } from './store/reducers';\nimport { gameToFirestore } from './utilities';\n\ninterface DispatchProps {\n  fetchUser: typeof firebaseActions['fetchUser'];\n  setGame: typeof firebaseActions['setGame'];\n  newGame: typeof firebaseActions['newGame'];\n}\n\ninterface StateProps {\n  user: firebase.User;\n  game: GameState;\n}\n\ntype Props = DispatchProps & StateProps;\n\nclass App extends React.Component<Props, any> {\n  constructor(props: Props) {\n    super(props);\n\n    this.createNewGame = this.createNewGame.bind(this);\n  }\n\n  public async componentDidMount() {\n    const { fetchUser } = this.props;\n\n    fetchUser();\n  }\n\n  public render() {\n    return (\n      <div className='App'>\n        <Header handleNewGame={this.createNewGame} />\n        <Wrapper />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(oldProps: Props) {\n    const { user, game } = this.props;\n    if (user && !_.isEmpty(game.player) && !_.isEqual(game, oldProps.game)) {\n      const fsGame = gameToFirestore(game);\n      this.props.setGame(user.uid, fsGame);\n    }\n  }\n\n  public createNewGame() {\n    const { user } = this.props;\n    if (user) {\n      this.props.newGame(user.uid);\n    }\n  }\n}\n\nexport default connect(\n  (state: AppState) => ({\n    game: state.game,\n    user: state.firebase.user\n  }),\n  {\n    fetchUser: firebaseActions.fetchUser,\n    setGame: firebaseActions.setGame,\n    newGame: firebaseActions.newGame\n  }\n)(App);\n","import { combineReducers, DeepPartial } from 'redux';\n\nimport firebase, {\n  INITIAL_STATE as firebaseInitial\n} from '../modules/firebase';\nimport { FirebaseState } from '../modules/firebase/types';\n\nimport game, { INITIAL_STATE as gameInitial } from '../modules/game';\nimport { GameState } from '../modules/game/types';\n\nexport interface AppState {\n  firebase: FirebaseState;\n  game: GameState;\n}\n\nexport const combineInitialState: DeepPartial<AppState> = {\n  game: gameInitial,\n  firebase: firebaseInitial\n};\n\nexport default combineReducers<any>({\n  game,\n  firebase\n});\n","import { applyMiddleware, compose, createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer, { AppState, combineInitialState } from './reducers';\n\nconst middleWare = compose(\n  applyMiddleware(thunk),\n  composeWithDevTools()\n);\n\nconst store: Store<AppState> = createStore(\n  rootReducer,\n  combineInitialState as any,\n  middleWare\n);\n\nexport default store;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './app';\nimport store from './app/store/configure';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nimport 'bulma/css/bulma.css';\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\nimport 'react-vis/dist/style.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}